@model IEnumerable<TourMe.Data.Entities.Experience>
    <style type="text/css">
         /* Always set the map height explicitly to define the size of the div
        * element that contains the map. */
         #map {
             height: 400px;
             width:400px;
         }
        #description {
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
        }

        #infowindow-content .title {
            font-weight: bold;
        }

        #infowindow-content {
            display: none;
        }

        #map #infowindow-content {
            display: inline;
        }

        .pac-card {
            margin: 10px 10px 0 0;
            border-radius: 2px 0 0 2px;
            box-sizing: border-box;
            -moz-box-sizing: border-box;
            outline: none;
            box-shadow: 0 2px 6px rgba(0, 0, 0, 0.3);
            background-color: #fff;
            font-family: Roboto;
        }

        #pac-container {
            padding-bottom: 12px;
            margin-right: 12px;
        }

        .pac-controls {
            display: inline-block;
            padding: 5px 11px;
        }

            .pac-controls label {
                font-family: Roboto;
                font-size: 13px;
                font-weight: 300;
            }

        #pac-input {
            background-color: #fff;
            font-family: Roboto;
            font-size: 15px;
            font-weight: 300;
            margin-left: 12px;
            padding: 0 11px 0 13px;
            text-overflow: ellipsis;
            width: 400px;
        }

            #pac-input:focus {
                border-color: #4d90fe;
            }

        #title {
            color: #fff;
            background-color: #4d90fe;
            font-size: 25px;
            font-weight: 500;
            padding: 6px 12px;
        }

        #target {
            width: 345px;
        }
     
    </style>
    <table class="table">
        <thead>
            <tr>

                <th>
                    @Html.DisplayNameFor(model => model.Titre)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.TypeExperience)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Lieu)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.dateDebut)
                </th>

                <th>
                    @Html.DisplayNameFor(model => model.dateFin)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Saison)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {

                <tr>

                    <td>
                        @Html.DisplayFor(modelItem => item.Titre)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.TypeExperience)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Lieu)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.dateDebut)
                    </td>



                    <td>
                        @Html.DisplayFor(modelItem => item.dateFin)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Saison)
                    </td>

                </tr>
            }
        </tbody>
    </table>
    <div class="row">
        <input id="pac-input"
               class="controls"
               type="text"
               placeholder="Search Box" />
        <div id="map"></div>
        @*<script>
            let map;

            function initMap() {
                map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: 36.858898, lng: 10.196500 },
                    zoom: 8,
                });
                // The marker, positioned at Uluru
                const marker = new google.maps.Marker({
                    position: { lat: 36.858898, lng: 10.196500 },
                    map: map,
                });
                const contentString =
                    '<div id="content">' +
                    '<div id="siteNotice">' +
                    "</div>" +
                    '<h1 id="firstHeading" class="firstHeading">Tunisia</h1>' +
                    '<div id="bodyContent">' +
                    "<p><b>Uluru</b>, also referred to as <b>Ayers Rock</b>, is a large " +
                    "sandstone rock formation in the southern part of the " +
                    "Northern Territory, central Australia. It lies 335&#160;km (208&#160;mi) " +
                    "south west of the nearest large town, Alice Springs; 450&#160;km " +
                    "(280&#160;mi) by road. Kata Tjuta and Uluru are the two major " +
                    "features of the Uluru - Kata Tjuta National Park. Uluru is " +
                    "sacred to the Pitjantjatjara and Yankunytjatjara, the " +
                    "Aboriginal people of the area. It has many springs, waterholes, " +
                    "rock caves and ancient paintings. Uluru is listed as a World " +
                    "Heritage Site.</p>" +
                    '<p>Attribution: Uluru, <a href="https://en.wikipedia.org/w/index.php?title=Uluru&oldid=297882194">' +
                    "https://en.wikipedia.org/w/index.php?title=Uluru</a> " +
                    "(last visited June 22, 2009).</p>" +
                    "</div>" +
                    "</div>";
                const infowindow = new google.maps.InfoWindow({
                    content: contentString,
                });
                marker.addListener("click", () => {
                    infowindow.open(map, marker);
                });

            }
        </script>*@
        <script>
            // This example adds a search box to a map, using the Google Place Autocomplete
            // feature. People can enter geographical searches. The search box will return a
            // pick list containing a mix of places and predicted search terms.
            // This example requires the Places library. Include the libraries=places
            // parameter when you first load the API. For example:
            // <script src="https://maps.googleapis.com/maps/api/js?key=YOUR_API_KEY&libraries=places">
            function initAutocomplete() {
                const map = new google.maps.Map(document.getElementById("map"), {
                    center: { lat: -33.8688, lng: 151.2195 },
                    zoom: 13,
                    mapTypeId: "roadmap",
                });
                // Create the search box and link it to the UI element.
                const input = document.getElementById("pac-input");
                const searchBox = new google.maps.places.SearchBox(input);
                map.controls[google.maps.ControlPosition.TOP_LEFT].push(input);
                // Bias the SearchBox results towards current map's viewport.
                map.addListener("bounds_changed", () => {
                    searchBox.setBounds(map.getBounds());
                });
                let markers = [];
                // Listen for the event fired when the user selects a prediction and retrieve
                // more details for that place.
                searchBox.addListener("places_changed", () => {
                    const places = searchBox.getPlaces();

                    if (places.length == 0) {
                        return;
                    }
                    // Clear out the old markers.
                    markers.forEach((marker) => {
                        marker.setMap(null);
                    });
                    markers = [];
                    // For each place, get the icon, name and location.
                    const bounds = new google.maps.LatLngBounds();
                    places.forEach((place) => {
                        if (!place.geometry || !place.geometry.location) {
                            console.log("Returned place contains no geometry");
                            return;
                        }
                        const icon = {
                            url: place.icon,
                            size: new google.maps.Size(71, 71),
                            origin: new google.maps.Point(0, 0),
                            anchor: new google.maps.Point(17, 34),
                            scaledSize: new google.maps.Size(25, 25),
                        };
                        // Create a marker for each place.
                        markers.push(
                            new google.maps.Marker({
                                map,
                                icon,
                                title: place.name,
                                position: place.geometry.location,
                            })
                        );

                        if (place.geometry.viewport) {
                            // Only geocodes have viewport.
                            bounds.union(place.geometry.viewport);
                        } else {
                            bounds.extend(place.geometry.location);
                        }
                    });
                    map.fitBounds(bounds);
                });
            }
        </script>

        <!-- Async script executes immediately and must be after any DOM elements used in callback. -->
        <script src="https://maps.googleapis.com/maps/api/js?key=AIzaSyAtVq15WIf2DZ6UH7A4xls57XQnk0bEdHc&callback=initAutocomplete&libraries=places&v=weekly"
                async></script>
    </div>
